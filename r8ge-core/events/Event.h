#ifndef R8GE_EVENT_H
#define R8GE_EVENT_H

#include <string>

namespace r8ge {
    // TODO: Add support for event for the engine itself
    // Event is used to send information across the engine.
    // Mainly by the windows and instance classes.
    class Event {
    public:
        enum class EventType : unsigned char
        {
            NONE,

            // Generated by windows
            WINDOW_RESIZED, WINDOW_CLOSED, WINDOW_FOCUS, WINDOW_LOST_FOCUS, WINDOW_MOVED,
            KEY_PRESSED, KEY_RELEASED,
            MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_MOVED, MOUSE_SCROLLED

            // Generated by the engine
        };

    public:
        Event();
        virtual ~Event();

        // Type of the event, used to identify the event
        [[nodiscard]] EventType getType() const;

        // Is the event handled? If so, it should be ignored by the dispatcher
        [[nodiscard]] bool isHandled() const;

        // Set the event as handled, so it will be ignored by the next call of the dispatcher
        void setToHandled();

        [[nodiscard]] std::string to_string() const;

    protected:
        struct {
            EventType type : 7;
            bool handled : 1;
        } m_header;
    };
}

#endif//!R8GE_EVENT_H
